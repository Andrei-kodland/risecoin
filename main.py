import os
import json
import telebot
from telebot.apihelper import ApiTelegramException

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "7987098857:AAH_nwOlbdn5Sq3VsEML0UqTEAKQyQfEnqE"
CHANNEL_USERNAME = "@risecoinblum"
CHANNEL_LINK = "https://t.me/risecoinblum"
USER_DATA_FILE = 'user_data.json'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_user_data():
    try:
        with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            for user_id in data:
                if 'username' not in data[user_id]:
                    data[user_id]['username'] = None
            return data
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_user_data(user_data):
    try:
        with open(USER_DATA_FILE, 'w', encoding='utf-8') as file:
            json.dump(user_data, file, indent=4, ensure_ascii=False)
        print("Data saved")
    except Exception as e:
        print(f"Error saving data: {e}")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(user_id, lang):
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    buttons = {
        "ru": [
            ("üìú –ü–ª–∞–Ω—ã", "plans"),
            ("üìÖ –î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞", "release_date"),
            ("üõí –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞", "buy_token"),
            ("üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "change_language"),
            ("üéØ –†–µ—Ñ —Å—Å—ã–ª–∫–∞", "get_referral_link"),
            ("üìä –°—Ç–∞—Ç–∞", "my_stat")
        ],
        "en": [
            ("üìú Plans", "plans"),
            ("üìÖ Release Date", "release_date"),
            ("üõí Buy Token", "buy_token"),
            ("üåê Change Language", "change_language"),
            ("üéØ Referral Link", "get_referral_link"),
            ("üìä Stats", "my_stat")
        ]
    }
    for text, callback, *url in buttons[lang]:
        btn = telebot.types.InlineKeyboardButton(text, url=url[0] if url else None, callback_data=callback if not url else None)
        markup.add(btn) if url else markup.add(btn, row_width=2)
    return markup

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def language_selection_menu():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–†—É—Å—Å–∫–∏–π", "English")
    return markup

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_data = load_user_data()
    user_id = str(message.chat.id)
    ref_id = message.text.split()[1] if len(message.text.split()) > 1 else None
    if ref_id == user_id or ref_id not in user_data:
        ref_id = None

    if user_id not in user_data or ref_id:
        user_data[user_id] = {
            'username': None,
            'referred_by': ref_id,
            'referral_count': user_data.get(user_id, {}).get('referral_count', 0),
            'referrals': user_data.get(user_id, {}).get('referrals', []),
            'language': None,
            'processed_referral': user_data.get(user_id, {}).get('processed_referral', None),
            'is_new': True
        }
        bot.send_message(user_id, "–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!üëä \nEnter your nickname to start!")
        save_user_data(user_data)
        return


    lang = user_data[user_id].get('language', 'ru')
    if user_data[user_id].get('username') is None:
        bot.send_message(user_id, "–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!\nEnter your nickname to start!")
    elif not user_data[user_id]['language']:
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ ‚¨áÔ∏è\nSelect language ‚¨áÔ∏è", reply_markup=language_selection_menu())
    elif user_data[user_id].get('is_new', False):
        msg = f"–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É {CHANNEL_LINK}, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!" if lang == "ru" else f"Join our group {CHANNEL_LINK} to complete registration!"
        bot.send_message(user_id, msg)
        markup = telebot.types.InlineKeyboardMarkup()
        text = "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" if lang == "ru" else "Check subscription"
        markup.add(telebot.types.InlineKeyboardButton(text, callback_data="check_subscription"))
        bot.send_message(user_id, "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∂–º–∏ —Å—é–¥–∞:\nClick after joining:", reply_markup=markup)
    else:
        msg = "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å ‚¨áÔ∏è" if lang == "ru" else "Welcome back! Pick what you want ‚¨áÔ∏è"
        bot.send_message(user_id, msg, reply_markup=main_menu(user_id, lang))

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∏–∫–∞
@bot.message_handler(func=lambda msg: str(msg.chat.id) in load_user_data() and load_user_data()[str(msg.chat.id)].get('username') is None)
def set_nickname(msg):
    user_data = load_user_data()
    user_id = str(msg.chat.id)
    nick = msg.text.strip()

    if not nick or len(nick) < 3 or len(nick) > 20 or not nick.isalnum():
        bot.send_message(user_id, "–ù–∏–∫ –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã!\nNickname 3-20 chars, letters and numbers only!")
        return

    user_data[user_id]['username'] = nick
    bot.send_message(user_id, "–ù–∏–∫ –≥–æ—Ç–æ–≤! –í—ã–±–µ—Ä–∏ —è–∑—ã–∫ ‚¨áÔ∏è\nNickname set! Pick language ‚¨áÔ∏è", reply_markup=language_selection_menu())
    save_user_data(user_data)

# –í—ã–±–æ—Ä —è–∑—ã–∫–∞
@bot.message_handler(func=lambda msg: msg.text in ["–†—É—Å—Å–∫–∏–π", "English"])
def set_language(msg):
    user_data = load_user_data()
    user_id = str(msg.chat.id)

    if user_data[user_id].get('username') is None:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∏–∫ –≤—ã–±–µ—Ä–∏!\nSet nickname first!")
        return

    user_data[user_id]['language'] = "ru" if msg.text == "–†—É—Å—Å–∫–∏–π" else "en"
    lang = user_data[user_id]['language']

    if lang == "en":
        bot.send_message(user_id, "The language is English, everything will be shown in this language.")
    else:
        bot.send_message(user_id, "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π, –≤—Å–µ –±—É–¥–µ—Ç –Ω–∞ —ç—Ç–æ–º —è–∑—ã–∫–µ.")

    if user_data[user_id].get('is_new'):
        msg = f"–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É {CHANNEL_LINK} –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è!" if lang == "ru" else f"Join our group {CHANNEL_LINK} to finish registration!"
        bot.send_message(user_id, msg)
        markup = telebot.types.InlineKeyboardMarkup()
        text = "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å" if lang == "ru" else "Check"
        markup.add(telebot.types.InlineKeyboardButton(text, callback_data="check_subscription"))
        bot.send_message(user_id, "–ñ–º–∏ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏:\nClick after joining:", reply_markup=markup)
    else:
        msg = "–ü—Ä–∏–≤–µ—Ç! –Ø RiseCoin Bot ü§ñ –ü–æ–º–æ–≥–∞—é –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å –º–æ–Ω–µ—Ç—É üöÄ –í—ã–±–µ—Ä–∏ —á—Ç–æ –Ω–∞–¥–æ ‚¨áÔ∏è" if lang == "ru" else "Hello! My name is RiseCoin Bot ü§ñ I help my creators in promoting our coin üöÄ Choose the line that interests you ‚¨áÔ∏è"
        bot.send_message(user_id, msg, reply_markup=main_menu(user_id, lang))

    save_user_data(user_data)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def check_subscription(call):
    user_data = load_user_data()
    user_id = str(call.message.chat.id)

    if user_data[user_id].get('username') is None:
        text = "–°–Ω–∞—á–∞–ª–∞ –Ω–∏–∫!\nNickname first!" if user_data[user_id].get('language', 'ru') == "ru" else "Nickname first!"
        bot.send_message(user_id, text)
        bot.answer_callback_query(call.id)
        return


    if not user_data[user_id]['language']:
        text = "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ —Å–Ω–∞—á–∞–ª–∞!\nPick language first!" if user_data[user_id].get('language', 'ru') == "ru" else "Pick language first!"
        bot.send_message(user_id, text)
        bot.answer_callback_query(call.id)
        return                                  

    lang = user_data[user_id]['language']
    try:
        member = bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if member.status in ["member", "administrator", "creator"]:
            user_data[user_id]['is_new'] = False

            ref_id = user_data[user_id]['referred_by']
            if ref_id and user_data[user_id]['processed_referral'] != ref_id:
                user_data[ref_id]['referral_count'] = user_data[ref_id].get('referral_count', 0) + 1
                user_data[ref_id]['referrals'] = user_data[ref_id].get('referrals', []) + [user_id]
                user_data[user_id]['processed_referral'] = ref_id
                ref_msg = f"–ö—Ä—É—Ç–æ! @{user_data[user_id]['username']} –ø—Ä–∏—à–µ–ª –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ!" if lang == "ru" else f"Cool! @{user_data[user_id]['username']} joined via your link!"
                try:
                    bot.send_message(ref_id, ref_msg)
                except ApiTelegramException as e:
                    print(f"Failed to notify referrer {ref_id}: {e}")

            msg = "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç RiseCoin Bot ü§ñ –Ø –ø–æ–º–æ–≥–∞—é —Å–≤–æ–∏–º —Å–æ–∑–¥–∞—Ç–µ–ª—è–º –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å –º–æ–Ω–µ—Ç—É üöÄ –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∫–æ—Ç–æ—Ä–∞—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ ‚¨áÔ∏è" if lang == "ru" else "Welcome! I‚Äôm RiseCoin Bot ü§ñ Helping promote our coin üöÄ Pick something ‚¨áÔ∏è"
            bot.send_message(user_id, msg, reply_markup=main_menu(user_id, lang))
            bot.answer_callback_query(call.id, "–ì–æ—Ç–æ–≤–æ!" if lang == "ru" else "Done!")
        else:
            bot.answer_callback_query(call.id, "–ü–æ–¥–ø–∏—à–∏—Å—å —Å–Ω–∞—á–∞–ª–∞!" if lang == "ru" else "Join first!")
    except ApiTelegramException as e:
        print(f"Subscription check error: {e}")
        if e.error_code == 400 and "chat not found" in str(e):
            text = f"–ì—Ä—É–ø–ø–∞ {CHANNEL_USERNAME} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!" if lang == "ru" else f"Group {CHANNEL_USERNAME} not found! Contact support!"
            bot.answer_callback_query(call.id, text)
        else:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ!" if lang == "ru" else "Error, try again!")
    save_user_data(user_data)

# –°–º–µ–Ω–∞ —è–∑—ã–∫–∞
@bot.callback_query_handler(func=lambda call: call.data == "change_language")
def change_language(call):
    user_data = load_user_data()
    user_id = str(call.message.chat.id)
    lang = user_data[user_id]['language']
    user_data[user_id]['language'] = None
    save_user_data(user_data)
    msg = "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ ‚¨áÔ∏è\nSelect language ‚¨áÔ∏è" if lang == "ru" else "Select language ‚¨áÔ∏è"
    bot.send_message(user_id, msg, reply_markup=language_selection_menu())
    bot.answer_callback_query(call.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    user_data = load_user_data()
    user_id = str(call.message.chat.id)

    if user_data[user_id].get('username') is None:
        text = "–°–Ω–∞—á–∞–ª–∞ –Ω–∏–∫!\nNickname first!" if user_data[user_id].get('language', 'ru') == "ru" else "Nickname first!"
        bot.send_message(user_id, text)
        bot.answer_callback_query(call.id)
        return

    if not user_data[user_id]['language']:
        text = "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫!\nPick language!" if user_data[user_id].get('language', 'ru') == "ru" else "Pick language!"
        bot.send_message(user_id, text)
        bot.answer_callback_query(call.id)
        return


    lang = user_data[user_id]['language']
    if user_data[user_id].get('is_new') and call.data != "check_subscription":
        msg = f"–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ {CHANNEL_LINK} –∏ –ø—Ä–æ–≤–µ—Ä—å!\nJoin {CHANNEL_LINK} and check!" if lang == "ru" else f"Join {CHANNEL_LINK} and check!"
        bot.send_message(user_id, msg)
        markup = telebot.types.InlineKeyboardMarkup()
        text = "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å" if lang == "ru" else "Check"
        markup.add(telebot.types.InlineKeyboardButton(text, callback_data="check_subscription"))
        bot.send_message(user_id, "–ñ–º–∏ –ø–æ—Å–ª–µ:\nClick after:" if lang == "ru" else "Click after:", reply_markup=markup)
        bot.answer_callback_query(call.id)
        return                                     

    responses = {
        "plans": "üìú –ü–ª–∞–Ω—ã - –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏ –≤ –∫—Ä–∏–ø—Ç–µ." if lang == "ru" else "üìú Plans - crypto innovations.",
        "release_date": "üìÖ –°–∫–æ—Ä–æ –æ–±—ä—è–≤–∏–º –¥–∞—Ç—É!" if lang == "ru" else "üìÖ Release date coming soon!",
        "buy_token": "üõí –®–∞–≥–∏:\n1Ô∏è‚É£ –ö–æ—à–µ–ª–µ–∫\n2Ô∏è‚É£ –ü–æ–∫—É–ø–∫–∞\n3Ô∏è‚É£ –î–µ—Ä–∂–∏ –∏ —Ç–æ—Ä–≥—É–π!" if lang == "ru" else "üõí Steps:\n1Ô∏è‚É£ Wallet\n2Ô∏è‚É£ Buy\n3Ô∏è‚É£ Hold & trade!"
    }

    if call.data in responses:
        bot.send_message(user_id, responses[call.data])
        bot.answer_callback_query(call.id)
    elif call.data == "get_referral_link":
        link = f"https://t.me/{bot.get_me().username}?start={user_id}"
        msg = f"üéØ –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link}" if lang == "ru" else f"üéØ Your referral link: {link}"
        bot.send_message(user_id, msg)
        bot.answer_callback_query(call.id)
    elif call.data == "my_stat":
        refs = user_data[user_id].get('referral_count', 0)
        ref_by = user_data[user_id].get('referred_by')
        ref_by_name = user_data.get(ref_by, {}).get('username', '–ù–∏–∫—Ç–æ' if lang == "ru" else 'Nobody') if ref_by else ('–ù–∏–∫—Ç–æ' if lang == "ru" else 'Nobody')
        stats = f"üìä –í—ã –ü—Ä–∏–≥–ª–∞—Å–∏–ª–∏: {refs} —á–µ–ª.\n–¢–µ–±—è –ø–æ–∑–≤–∞–ª: @{ref_by_name}" if lang == "ru" else f"üìä You Invited: {refs} people.\nInvited by: @{ref_by_name}"
        bot.send_message(user_id, stats)
        bot.answer_callback_query(call.id)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("Bot started...")
    try:
        bot.polling(none_stop=True)
    except ApiTelegramException as e:
        print(f"Telegram API error: {e}")
        if e.error_code == 409:
            print("Conflict: Another bot instance is running. Stop it.")
        save_user_data(load_user_data())
    except Exception as e:
        print(f"Something went wrong: {e}")
        import traceback
        traceback.print_exc()
        save_user_data(load_user_data())






















  







































